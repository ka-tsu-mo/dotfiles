[[plugin]]
repo = 'Shougo/dein.vim'
merged = '0'

[[plugins]]
repo = 'tomasr/molokai'
hook_add = '''
  augroup loadcolorscheme
    autocmd!
    autocmd VimEnter * ++nested colo molokai
    autocmd ColorScheme * hi Normal ctermbg=NONE guibg=NONE
    autocmd ColorScheme * hi NonText ctermbg=NONE guibg=NONE
    autocmd ColorScheme * hi LineNr ctermbg=NONE guibg=NONE
  augroup END
'''

[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#tabline#enabled = 1
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'
hook_add = '''
  let g:airline_theme='molokai'
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'

[[plugin]]
repo = 'Shougo/neco-vim'

[[plugin]]
repo = 'neoclide/coc-neco'

[[plugins]]
repo = 'neoclide/coc.nvim'
merged = '0'
rev = 'release'
hook_add = '''
  " Use tab for trigger completion with characters ahead and navigate.
  " Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
  inoremap <silent><expr> <TAB>
        \ pumvisible() ? "\<C-n>" :
        \ <SID>check_back_space() ? "\<TAB>" :
        \ coc#refresh()
  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

  function! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
  endfunction

  " Use <c-space> to trigger completion.
  inoremap <silent><expr> <c-space> coc#refresh()

  " Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
  " Coc only does snippet and additional edit on confirm.
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

  " Use `[c` and `]c` to navigate diagnostics
  nmap <silent> [c <Plug>(coc-diagnostic-prev)
  nmap <silent> ]c <Plug>(coc-diagnostic-next)

  " Remap keys for gotos
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Use K to show documentation in preview window
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    else
      call CocAction('doHover')
    endif
  endfunction

  " Highlight symbol under cursor on CursorHold
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Remap for rename current word
  nmap <leader>rn <Plug>(coc-rename)

  " Remap for format selected region
  xmap <leader>f  <Plug>(coc-format-selected)
  nmap <leader>f  <Plug>(coc-format-selected)

  augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  augroup end

  " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
  xmap <leader>a  <Plug>(coc-codeaction-selected)
  nmap <leader>a  <Plug>(coc-codeaction-selected)

  " Remap for do codeAction of current line
  nmap <leader>ac  <Plug>(coc-codeaction)
  " Fix autofix problem of current line
  nmap <leader>qf  <Plug>(coc-fix-current)

  " Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
  nmap <silent> <TAB> <Plug>(coc-range-select)
  xmap <silent> <TAB> <Plug>(coc-range-select)
  xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)

  " Use `:Format` to format current buffer
  command! -nargs=0 Format :call CocAction('format')

  " Use `:Fold` to fold current buffer
  command! -nargs=? Fold :call     CocAction('fold', <f-args>)

  " use `:OR` for organize import of current buffer
  command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

  " Use `:Prettier` to format by using prettier
  " command! -nargs=0 Prettier :CocCommand prettier.formatFile

  " Add status line support, for integration with other plugin, checkout `:h coc-status`
  set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

  " Using CocList
  " Show all diagnostics
  nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
  " Manage extensions
  nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
  " Show commands
  nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
  " Find symbol of current document
  nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
  " Search workspace symbols
  nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
  " Do default action for next item.
  nnoremap <silent> <space>j  :<C-u>CocNext<CR>
  " Do default action for previous item.
  nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
  " Resume latest coc list
  nnoremap <silent> <space>p  :<C-u>CocListResume<CR>
'''

[[plugins]]
repo = 'ka-tsu-mo/at-vim-coder'
hook_add = '''
  let g:at_vim_coder_workspace = '~/Documents/competitive_programming/AtCoder'
  let g:at_vim_coder_save_cookies = 1
  nmap <silent> ;t <Plug>(at-vim-coder-run-test)
  nmap <silent> ;c <Plug>(at-vim-coder-check-status)
  nmap <silent> ;s <Plug>(at-vim-coder-submit)
'''

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'lambdalisue/vim-quickrun-neovim-job'
hook_add = '''
  let g:quickrun_config = {
  \  '_': {
  \    'outputter': 'error',
  \    'outputter/error/success': 'buffer',
  \    'outputter/error/error': 'quickfix',
  \    'outputter/buffer/split': 'bot10',
  \    'outputter/buffer/close_on_empty': 1
  \  }
  \}

  if has('nvim')
    " Use 'neovim_job' in Neovim
    let g:quickrun_config._.runner = 'neovim_job'
  elseif exists('*ch_close_in')
    " Use 'job' in Vim which support job feature
    let g:quickrun_config._.runner = 'job'
  endif
'''
